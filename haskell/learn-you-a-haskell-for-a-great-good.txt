Introduction
======

- Referential transparency - when a function is called twice with the same parameters, it is guaranteed to return the same result. This allows the compiler to reason about the program's behaviour.

- Haskell is lazy by default. Programs in Haskell are a series of transformations on data.

- consider having an immutable list of numbers xs = [1, 2, 3, 4], and a function doubleMe, which multiplies every element by 2 and then returns a new list.
		
		doubleMe(doubleMe(doubleMe(xs)))

- no usage of the result means it won't be evaluated. But once the result is required, the outermost call demads the result of the next call, which propagates to the innermost call. This results in a single pass through the list, where the innermost function returns a 2 as a two element, which the second function doubles, and so on.

- Haskell is statically typed.

Starting Out
======

		:set prompt "ghci> " -- this will set the prompter text to the supplied string parameter.

		5 / 2 -- this results in 2.5, so integer division is not the default one

- as in any language, operator precedence is still the same, and it can be altered using parantheses.
		
		50 * (100 - 4999) -- obviously yields -244950

- a pitfall here are negative numbers. A negative number is best surrounded by parantheses, in order to avoid confusing the compiler.
(and in order to avoid a precedence parsing error)

- boolean algebra is the same, having operators like &&, ||, not, and the values True, and False.

- testing for equality is done using the symbols '==', and '/='.

- all the numeric, binary operators are actually functions. (i.e. +, -, * etc.)

- most of the non-numeric functions are actually written in prefix format.

		succ 8 -- yields a 9

- the 'succ' function will take as input anything that has defined a successor, and returns that successor.

- min and max take two parameters that have an order defined (e.g. numbers), and return the lesser/greater, respectively.
		
		min 3 4 -- results in 3

		min -3 4 -- results in a parsing error, lol :)

		min (-3) 4 -- results in -3

- function application means calling a function by specifying its name, and then supplying its parameters. This language construct has the highest precedence. This means that the following statements are equivalent:

		succ 9 + max 3 4 + 1

		(succ 9) + (max 3 4) + 1

- this means that in the case of
		
		succ 9 * 10 -- the result will be 100, because the evaluation order is (succ 9) * 10

- function application is not denoted by the use of parantheses, like in C-like languages. Therefore, baz(3, "haha") would be simply baz 3 haha in haskell. Also, 

		bar (bar 3) -- this means something like bar(bar(3)). Also, notice the space between the function name and its sole parameter!

- function definition is pretty similar to the calling syntax. The function name is followed by space-separated parameters.
- the '=' symbol marks the start of the function body.

- the simple doubleMe, and doubleUs functions are a common pattern to Haskell. (i.e. building small functions, that are easy to reason about, and whose proper functionality can be verified, and combining them into more complex programs).
- This helps avoid repetition of code, as well as enforcing a clear separation of higher level abstractions, and implementation details.
Using such function composition will make the code resilient to change, as a change in the specification should result in a very localized change in the code (e.g. in the doubleMe function, which handles the low-level operation.)

- Haskell functions don't have to be in any particular order in a compilation unit, so the usage of doubleMe in the body of doubleUs does not enforce prior definition of doubleMe.

- ghci complains if indentation is done using tabs, so spaces are recommended instead.

- the difference between haskell's if statement, and the if statement from imperative languages, is that in haskell the else part is mandatory.
This is because every expression or function must return something.

- The if statement here is an expression (i.e. a piece of code that returns a value).

- a common practice in haskell is using an aphostrophe in the name of the function, if it is a strict function (one that is not lazy.)

		a'b is a valid identifier.

- A function like 
		str = "hello world"

	is called a definition (or a name).

- because changing what names (and functions mean) once they have been defined, str and the string "hello world" can be used interchangeably.

Lists
------

- lists are a homogenous data structure (meaning that they store elements of the same type)

- the let keyword can be used in the interpreter to bind a value to a name.
		
		let a = 1 -- this is equivalent to doing a = 1 in a script, and then loading it.

- strings are just lists of characters. (this means that string literals are just syntactic sugar for their list equivalent)

		[1, 2, 3] ++ [4, 5, 6] -- list concatenation => [1, 2, 3, 4, 5, 6] 

- this operator is actually similar to append from lisp, meaning it should be O(n), where n is the size of the left operand. This can be very costly, especially for repeated string concatentation. (e.g. accumulator + "short text")

		'A' : ['B', 'C'] -- cons operation => ['A', 'B', 'C']

- the cons operator takes an element as its left operand, and a list as right operand, and adds the element to the beginning of the list.

		[1, 2, 3] -- is actually just syntactic sugar for 1:2:3:[], where [] is the empty list.

- accessing an element by its index is done using the '!!' operator. List indexes are zero-based.
		
		[1, 2, 3] !! 1 -- yields 2.
		[1, 2, 3] !! 3 -- index too large exception
		[1, 2, 3] !! (-11) -- negative index exception.

- reminder:: unlike lisp, haskell is strongly typed, and therefore something like
		
		let a = [1, 2, 3]
		[4, 5] : a -- will not work, since the types do not align. Nesting lists inside of lists implies that the holder contains list-type elements, i.e.

		let b = [[1], [2, 3]]
		[4, 5] : b -- this will work.

		-- likewise, in the case of b, for the ++ operator
		b ++ [5, 6] -- invalid
		b ++ [[5, 6]] -- valid

- lists can be compared, if the things they contain can be compared. When using the '<', '<=', '>', '>=' operators, the lists are compared in lexicographical order. This means their heads are compared, and if equal, comparison wil recur for the tails, until a decision can be reached.

- the functions 'head' and 'tail' take a list argument, and their behaviour is self-explanatory.
		
		head [1, 2, 3] -- => 1
		tail [1, 2, 3] -- => [2, 3]

- the functions 'last', and 'init' are head, and tail mirrored
		
		last [1, 2, 3] -- => 3
		init [1, 2, 3] -- => [1, 2], i.e. but-last semantics.

- 'length' returns the element count of a list. 'null' tests whether a list is empty. 'reverse'.. well.. obviously

		length [1, 2, 3] -- => 0
		null [1, 2, 3] -- => False. This is a check for the empty list.
		reverse [1, 2, 3] -- => [3, 2, 1]

- 'take' takes two parameters, a number, and a list, and extracts the first <number> elements from the list.
	-> if the number is greater than, or equal to the list length, it just returns the list.
	-> if the number is lower than the list length, but greater than zero, it returns the sublist described by the interval of indexes [0.. number)
	-> if the number is lower or equal to zero, the empty list is returned.

		take 3 [1, 3, 4, 5, 6] -- => [1, 3, 4] (indexes 0 -> 2)

- 'drop' works exactly like take, but it drops the first <number> elements from the initial list.
		
		drop (-1) [1, 2, 3] -- => [1, 2, 3]
		drop 2 [1, 2, 3] -- => [3], i.e. drop until index 2 (non-inclusive)

- 'minimum', and 'maximum' are self-explanatory, but like head, tail, last, init, they throw an exception, if called on an empty list.

- 'sum', and 'product' both operate on lists of numbers, and return the lists' sum, and product, respectively.
		
- 'elem' takes an element, and a list of elements and tests whether the first argument is part of the list. Oftenly, it is called using the infix syntax.
		
		elem 2 [1, 2, 3] -- True
		2 `elem` [1, 2, 3] -- equivalent to the first.

Ranges
------
- The syntax for ranges is pretty similar to the one for lists.

		[1..20] -- generates [1, 2, 3, ..., 20], i.e. the sequence of numbers from 1 to 20, with the implicit step 1
		[2, 4 .. 20] -- generates [2, 4, ..., 20]
		[3, 6 .. 20] -- generates [3, 6, ..., 18]
		['a' .. 'z']

		[20 .. 1] -- will generate an empty list, which is correct behaviour.
		[20, 19 .. 1] -- will generate all the numbers from 20, down to 1.

- floating point numbers should be avoided in sequences, because their representation is not completely precise (=> can yield some unexpected sequence members)

- ranges can also be used to generate infinite lists. 
		
		[13, 26 .. 24 * 13] -- the first 24 multiples of 13
		take 13 [13, 26 ..] -- the more elegant way

- because Haskell is lazy, the infinite range will not be evaluated (because it will never finish), but rather only evaluate the first 24 elements of the sequence, because these are the required ones.

- 'cycle' takes a list and cycles its contents into an infinite list.
		
		take 5 (cycle [1, 2, 3]) -- => [1, 2, 3, 1, 2]
		take 11 (cycle "LOL") -- => "LOL LOL LOL"

- 'repeat' takes a single element, and produces an infinite list of that element.
	
		take 7 (repeat "L") -- => "LLLLLLL"

- 'replicate' behaves much like repeat, but it also takes, as a first parameter, the repetition count.

		replicate 5 10 -- => [10, 10, 10, 10, 10]

List comprehension
------

- The typical mathematical `set comprehension` looks like:

		S = { INPUT_TRANSFORMATION [2 * x] | INPUT_SET x e N, PREDICATE x <= 10}, where N is the input set, and x <= 10 is the predicate.

- List comprehensions in Haskell are pretty similar to the standard mathematical notation:
		
		[x * 2 | x <- [1 .. 10]] -- this means that for every element in [1 .. 10], bound to the name x, apply f(x) = x * 2

- just like in the mathematical notation, the predicate goes after the input set.
		
		[x * 2 | x <- [1 .. 10], x `mod` 2 == 0] -- considers only the even numbers in the range.
		[x * 2 | x <- [1 .. 10], x * 2 >= 12] -- considers only the numbers whose double are greater than 12.

- the operation by which some elements are excluded from a list (using a predicate), is called filtering.

		boomBangs xs = [if x < 10 then "BOOM!" else "BANG!" | x <- xs, odd x]
		boomBangs [1, 2, 3] -- => ["BOOM!","BOOM!"]
		boomBangs [1, 2, 3, 11, 12, 13] -- => ["BOOM!","BOOM!","BANG!","BANG!"]

- a list comprehension can have multiple comma-separated predicates, and an element will only be included the resulting list if it satisfies all predicates:
		
		[x | x <- [1 .. 20], x /= 13, x /= 15, x /= 17] -- only numbers that are not 13, 15, or 17 will pass.

- a list comprehension can also draw values from multiple sources. This will produce all possible combinations from the given lists, if no predicate is specified. (drawing from two lists, of sizes n, and m, respectively, will produce an output of m * n, if no filtering is applied)

		[x * y | x <- [1 .. 5], y <- [5 .. 19], x == y] -- yields [25]

- '_' is an anonymous variable, useful when the extracted value from a list is not used.

- Since strings are lists, comprehensions can be used to produce and consume strings.

- nested comprehensions can also be written, if the list contains nested lists.

Tuples
------

- Tuples are pretty much like lists, with a few fundamental differences:
	-> lists have a single type, where tuples can have n-types, corresponding to its n-elements (=> tuples are not homogenous)

		("One", 2, 't', 'h', 'r', 'e', 'e') -- a tuple with 7 elements (a string type, a number type, and 5 character types)

- a tuple's type is dictated by the number of elements it has, as well as the types (and their order!) it contains.
		
		[(1, 2), (3, 4), (5, 6, 7)] -- this is an error, because of the third element.

- Tuples can also contain lists.

- tuples are more rigid than lists, because appending something to a tuple would mean changing its type, and, therefore, such functions can't be as general as the list cons or append.

- there can't be a singleton tuple, unlike a singleton list.

- Tuples can be compared to each other if their elements can be compared (like in the case of lists), AND only if they have the same size.

