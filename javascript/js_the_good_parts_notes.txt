- the simple types of JS are numbers, strings, booleans (t/f), null, and undefined. All others are objects.
- numbers, strings, and booleans are object-like, in that they have methods, but they are immutable.
- objects are mutable key-value collections.
- values can be retrieved from an object by using ["identifier"] notation, or, in case the identifier is a legal js name, and not a reserved word, then the "." notation can be used, instead.
- a value in an object can be updated by an assignment. If the property name already exists in the object, the property value is replaced, otherwise the object is augmented.
- objects are passed around by reference, they are never copied.
- every object is linked to a prototype object from which it can inherit properties. All objects created from object literals are linked to Object.prototype, an object that comes standard with js.
- when a new object is created, its prototype can be selectd. A simplified mechanism for creating objects is augmenting the Object function with a 'create' method. This create method creates a new object which uses an old object as its prototype.
		
		if(typeof Object.create !== 'function') {
			Object.create = function(o) {
				var F = function() {};
				F.prototype = o;
				return new F();
			}
		};

- the prototype link has no effect on assigning values to the newly created object (unless newObj.__proto__ is used), but the prototype comes in handy in the case of retrieval; if the current object does not have the property being accessed, then js will try to retrieve the property from the proto, and this is a recursive process, up to Object.prototype. If the desired property does not exist in the prototype chain, then the resuld is the 'undefined' value. This is called =DELEGATION=.

- the prototype relationship is a dynamic relationship. If a new property is added to a prototype, then it will be visible in all objects that derive from that prototype.

- reflecting on the properties of an object is done by using the 'typeof' operator, in order to determine the type of a property.
		
		typeof flight.number	// 'number'
		typeof flight.status	// 'string'
		typeof flight.manifest	// 'undefined' <- missing
		typeof flight.toString	// 'function'  <- care must be taken, as typeof also checks the inheritance chain.

- there are two approaches to dealing with undesired properties.
	1) have the program look for, and reject funciton values. Generally, when reflecting, it is data that we are searching for, and should be aware that some values could be functions.
	2) the other approach is to use the .hasOwnProperty('property-name') method, which returns true only if the object has a particular property (will not look up the inheritance chain).

- the 'for in' statement can loop over all the property names in an object. (this WILL include the properties from the hierarchical chain). The most common methods to filter out unwanted values are the hasOwnProperty method, and using typeof to exclude functions.

		var name;
		for(name in stooge) {
			if(typeof stooge[name] !== 'function') {
				document.writeln(name + ': ' + stooge[name]);
			}
		}
	however, using this method, there is no guarantee on the order of the names. If order is important, it's better to make an array of all the property names, and iterate through the object properties using this array instead.

		var i;
		var properties = ['name', 'age', 'profession'];
		for(i = 0; i < properties.length; i += 1) {
			// stooge[properties[i]]
		}

- the delete operator can be used to remove a property from an object. It iwll remove a property from an object, if the object does indeed have the property. No objects in the prototype linkage will be touched.
	
	stooge.nickname;	// 'Moe'

	delete stooge.nickname;

	stooge.nickname		// the value will be the inherited value for this property name, if any, otherwise undefined.

- js makes it easy to define global variables that can hold all of the assets of an app. Minimizing the global variable is recommended, however, as GV weaken the resilience of the program.
	One way to do this is to declare a single global variable for the application, and use it as the container for the app.

		var MYAPP = {};

		MYAPP.feature = {
			// ...
		};

		MYAPP.otherFeature = {
			// ...
		};

- reducing the global footprint to a single name, the chance of bad interactions with third-party libraries is reduced, and it also makes easier to read the program.

- a function literal can appear anyhwere an expression can appear.

- since functions are objects, they can also contain methods (i.e. nested functions). A nested function has access to its own parameters, to the enclosing function parameters, and also to the enclosing function object context (this is called a CLOSURE). The special thing about functions is that they can be invoked.

- function objects are created with function literals:

		var add = function(a, b) {
			return a + b;
		};

- a function literal can appear anywhere that an expression can appear. Functions can be nested inside other fuctions, and an inner function, of course, has access to the outer parameters and variables. The function object created by a function literal contains a link to the outer context, and this is called a CLOSURE.

- invoking a function suspends the execution of the current function, passing control, and parameters tot he new function. Also, in addition to the declared arguments, every function receives two additional parameters: this, and arguments.

- the invocation operator is a pair of parantheses that follow any expression that produces a function value. The parantheses can contain zero or more expressions, separated by comas, where each expression will be bound as an argument value, having the function's parameter names. If the number of parameters is greater than the declared parameters, the extra ones are ignored, and if it is less, the remaining ones are initialized to undefined.

- the this parameter is very important, and its value is determined by the invocation pattern. There are four patterns of invocation in javascript:
		
	1) The method invocation pattern
		-> when a function is stored as a property of an object, it is called a method. When a method is invoked, 'this' is ound to the enclosing boject. I fan invocation expression contains a refinement (that is, a . dot expression, or [subscript] expression), it is invoked as a method:

			var myObject = {
				value: 0,
				increment: function(inc) {
					this.value += typeof inc === 'number' ? inc : 1;
				}
			};

		A method can use this ot access the object, so that it can retrieve values from the object, or modify the object. The binding of 'this' happens at invocation time. This very late binding makes functions that use 'this' highly reusable. Methods that get the object context from 'this' are called public methods.

	2) The function invocation pattern
		-> when a function is not the property of an object, it is invoked as a function:
			var sum = add(3, 4);

		when a function is invoked with this pattern, 'this' is bound to the global object. This is a flaw in the language design, and it should have been that 'this' was bound to the enclosing context's 'this'.
		a consequence of this error is that a method cannot employ an inner function to help it do its work, because the inner function does not share the method's access to the object as 'this' is bound to the wrong value. The workaround is that the enclosing method must define a variable, and assign it the value of 'this', therefore enabling access to the enclosing object for the inner function. A very common name for the outer context is 'that'.

			myObject.double = function() {
				var enclosingObject = this;

				var helper = function() {
					enclosingObject.value = add(enclosingObject.value, enclosingObject.value);
				};

				helper();
			};

	3) The constructor invocation pattern
		-> js is a prototypal inheritance language, meaning that objects can inherit properties directly from outer objects (the language is class-free). If a function is invoked with the new prefix, then a new object will be created, with a hidden link to the value of the function's prototype member, and 'this' will be bound to that new object. The new prefix also changes the behaviour of the return statement.

			// Create a constructor function called Quo, which makes an object with a status property.
			var Quo = function(quo) {
				this.status = quo;
			};

			// Give all instances of Quo a public method called getStatus
			Quo.prototype.getStatus = function() {
				return this.status;
			};

			// Create an instance of Quo
			var myQuo = new Quo("confused");

			document.writeln(myQuo.getStatus()); // => confused

		functions that are intended to be used with the new prefix are called constructors. By convention, they are kept in variables with a capitalized name, because if a constructor is called without the new prefix, very bad things can happen, without a compile-time, or runtime warning, so the capitalization convention is REALLY important.

		Use of this style of a constructor is not recommended.

	4) The apply invocation pattern

		-> because js is a functional object-oriented language, functions can have methods. The apply method lets us construct an array of arguments to use to invoke a function. It also lets us choose the value of 'this'. The apply method takes two parameters. The first is the value that should be bound to 'this', The second is an array of parameters.

			Quo.prototype.getStatus.apply(null, myQuo); // => "", because the method uses 'this internally', which is bound to null, and the parameters are ignored anyway.
			Quo.prototype.getStatus.apply(myQuo, null); // => "confused", because the method ignores the parameters, but this time, the 'this' variable is bound to myQuo.

			Quo.prototype.func = function(a, b, c) { 
				return a + b + c + this.getStatus(); 
			};

			Quo.prototype.func.apply(myQuo, [1, 2, 3]); // => "6confused", as a = 1, b = 2, c = 3, and this.getStatus() = "confused"


- a bonus parameter that is available to functions when they are invoked, is the 'arguments' array. This gives the function access to all of the arguments that were supplied with the invocation, including excess arguments that were not assigned to parameters. This makes it possible to write functions that take a variable number of parameters, e.g.:
			

			// defining the variable sum inside of the function does not interfere with the one defined outside the function. The function only sees the inner one.
			var sum = function() {
				var i, sum = 0;
				for(i = 0; i < arguments.length; i += 1) {
					sum += arguments[i];
				}
				return sum;
			};

- this is not a very useful pattern. arguments is not really an array, it's an array-like object. It has a length property, but lacks all of the array methods.

- a function always returns a value. If the return value is not specified, then undefined is returned. If the function was invoked with the new prefix, and the return value is not an object, then this (the new object) is returned instead.

- js provides an exception handling mechanism. Exceptions are unusual (but not completely unexpected) mishaps that infere with the normal flow of a program. When such a mishap is detected, the program should throw an exception:
		
		var add = function(a, b) {
			if(typeof a !== 'number' || typeof b !== 'number') {
				throw {
					name: 'TypeError',
					message: 'Add function requires numbers as parameters.'
				};
			}
			return a + b;
		};

- the throw statement interrupts execution of the function, and it should be given an exception object, containing a name property, and a message property. It can also be augmented with extra properties.

- the exception object will be delivered to the catch clause of a try statement. A try statement has a single catch block that will catch all exceptions. If exception handling depends on the type of the exceptions, then the handler will have to inspect the name to determine the type of the exception.

- js allows the basic types to be augmented, e.g. adding a method to Object.prototype makes that method available to all objects. This also works for functions, arrays, strings, numbers, regular expressions, and booleans. (augmenting Function.prototype, a method can be made available to all functions)

		Function.prototype.method = function(name, func) {
			this.prototype[name] = func;
			return this;
		};

-  js does not have a separate integer type, but it sometimes come in handy to extract just the integer part of a number.
		
		Number.method('integer', function() {
			return Math[this < 0 ? 'ceiling' : 'floor'](this);
		});

		(-10 / 3).integer(); // => -3

		String.method('trim', function() {
			return this.replace(/^\s+|\s+$/g, '');
		});

		'"' + "        neat       ".trim() + '"'; // => "neat"

- the prototypes of basic types are public structures, so care must be taken when adding functions to it (especially when mixing it with libraries). A defensive technique is adding a method only if it is known to be missing:
		
		Function.prototype.method = function (name, func) {
			if(!this.prototype[name]) {
				this.prototype[name] = func;
			}
		};
